import type { ResolveTree } from "graphql-parse-resolve-info";
import type { Node } from "../classes";
import type { Context } from "../types";
import * as CypherBuilder from "./cypher-builder/CypherBuilder";
export interface ProjectionMeta {
    authValidateStrs?: string[];
    cypherSortFields?: string[];
}
export declare type ProjectionResult = {
    projection: string;
    params: Record<string, any>;
    meta: ProjectionMeta;
    subqueries: Array<CypherBuilder.Clause>;
    subqueriesBeforeSort: Array<CypherBuilder.Clause>;
};
export default function createProjectionAndParams({ resolveTree, node, context, chainStr, varName, literalElements, resolveType, }: {
    resolveTree: ResolveTree;
    node: Node;
    context: Context;
    chainStr?: string;
    varName: string;
    literalElements?: boolean;
    resolveType?: boolean;
}): ProjectionResult;
//# sourceMappingURL=create-projection-and-params.d.ts.map