"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateRead = void 0;
const neo4j_driver_1 = require("neo4j-driver");
const graphql_relay_1 = require("graphql-relay");
const create_projection_and_params_1 = __importDefault(require("./create-projection-and-params"));
const create_auth_and_params_1 = require("./create-auth-and-params");
const constants_1 = require("../constants");
const translate_top_level_match_1 = require("./translate-top-level-match");
const CypherBuilder = __importStar(require("./cypher-builder/CypherBuilder"));
function translateRead({ node, context, isRootConnectionField, }) {
    const { resolveTree } = context;
    const varName = "this";
    let matchAndWhereStr = "";
    let authStr = "";
    let projAuth = "";
    let cypherParams = context.cypherParams ? { cypherParams: context.cypherParams } : {};
    const interfaceStrs = [];
    const topLevelMatch = (0, translate_top_level_match_1.translateTopLevelMatch)({
        node,
        context,
        varName,
        operation: "READ",
    });
    matchAndWhereStr = topLevelMatch.cypher;
    cypherParams = { ...cypherParams, ...topLevelMatch.params };
    const projection = (0, create_projection_and_params_1.default)({
        node,
        context,
        resolveTree,
        varName,
    });
    cypherParams = { ...cypherParams, ...projection.params };
    if (projection.meta?.authValidateStrs?.length) {
        projAuth = `CALL apoc.util.validate(NOT (${projection.meta.authValidateStrs.join(" AND ")}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`;
    }
    const allowAndParams = (0, create_auth_and_params_1.createAuthAndParams)({
        operations: "READ",
        entity: node,
        context,
        allow: {
            parentNode: node,
            varName,
        },
    });
    if (allowAndParams[0]) {
        cypherParams = { ...cypherParams, ...allowAndParams[1] };
        authStr = `CALL apoc.util.validate(NOT (${allowAndParams[0]}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`;
    }
    const projectionSubqueries = CypherBuilder.concat(...projection.subqueries);
    const projectionSubqueriesBeforeSort = CypherBuilder.concat(...projection.subqueriesBeforeSort);
    // TODO: concatenate with "translateTopLevelMatch" result to avoid param collision
    const readQuery = new CypherBuilder.RawCypher((env) => {
        const projectionSubqueriesStr = projectionSubqueries.getCypher(env);
        const subqueriesBeforeSort = projectionSubqueriesBeforeSort.getCypher(env);
        if (isRootConnectionField) {
            return translateRootConnectionField({
                context,
                varName,
                projection,
                subStr: {
                    projectionSubqueries: projectionSubqueriesStr,
                    matchAndWhereStr,
                    authStr,
                    projAuth,
                    interfaceStrs,
                    subqueriesBeforeSort,
                },
            });
        }
        return translateRootField({
            context,
            varName,
            projection,
            node,
            subStr: {
                projectionSubqueries: projectionSubqueriesStr,
                matchAndWhereStr,
                authStr,
                projAuth,
                interfaceStrs,
                subqueriesBeforeSort,
            },
        });
    });
    const result = readQuery.build(varName);
    return {
        cypher: result.cypher,
        params: { ...cypherParams, ...result.params },
    };
}
exports.translateRead = translateRead;
function translateRootField({ context, varName, projection, node, subStr, }) {
    const { resolveTree } = context;
    const optionsInput = (resolveTree.args.options || {});
    let limit = optionsInput.limit;
    if (node.queryOptions) {
        limit = node.queryOptions.getLimit(optionsInput.limit);
    }
    const hasLimit = Boolean(limit) || limit === 0;
    const params = {};
    const hasOffset = Boolean(optionsInput.offset) || optionsInput.offset === 0;
    const sortOffsetLimit = [`WITH *`];
    if (optionsInput.sort && optionsInput.sort.length) {
        const sortArr = optionsInput.sort.reduce((res, sort) => {
            return [
                ...res,
                ...Object.entries(sort).map(([field, direction]) => {
                    if (node.cypherFields.some((f) => f.fieldName === field)) {
                        return `${varName}_${field} ${direction}`;
                    }
                    return `${varName}.${field} ${direction}`;
                }),
            ];
        }, []);
        sortOffsetLimit.push(`ORDER BY ${sortArr.join(", ")}`);
    }
    if (hasOffset) {
        params[`${varName}_offset`] = optionsInput.offset;
        sortOffsetLimit.push(`SKIP $${varName}_offset`);
    }
    if (hasLimit) {
        params[`${varName}_limit`] = limit;
        sortOffsetLimit.push(`LIMIT $${varName}_limit`);
    }
    const withStrs = subStr.projAuth ? [`WITH *`, subStr.projAuth] : [];
    const returnStrs = [`RETURN ${varName} ${projection.projection} as ${varName}`];
    const cypher = [
        subStr.matchAndWhereStr,
        subStr.subqueriesBeforeSort,
        ...(sortOffsetLimit.length > 1 ? sortOffsetLimit : []),
        subStr.authStr,
        ...withStrs,
        ...subStr.interfaceStrs,
        subStr.projectionSubqueries,
        ...returnStrs,
    ];
    return [cypher.filter(Boolean).join("\n"), params];
}
function translateRootConnectionField({ context, varName, subStr, projection, }) {
    const { resolveTree } = context;
    const afterInput = resolveTree.args.after;
    const firstInput = resolveTree.args.first;
    const sortInput = resolveTree.args.sort;
    const cypherParams = {};
    const hasAfter = Boolean(afterInput);
    const hasFirst = Boolean(firstInput);
    const hasSort = Boolean(sortInput && sortInput.length);
    const sortCypherFields = projection.meta?.cypherSortFields ?? [];
    let sortStr = "";
    if (hasSort) {
        const sortArr = sortInput.reduce((res, sort) => {
            return [
                ...res,
                ...Object.entries(sort).map(([field, direction]) => {
                    // if the sort arg is a cypher field, substitaute "edges" for varName
                    const varOrEdgeName = sortCypherFields.find((x) => x === field) ? "edge.node" : varName;
                    return `${varOrEdgeName}.${field} ${direction}`;
                }),
            ];
        }, []);
        sortStr = `ORDER BY ${sortArr.join(", ")}`;
    }
    let offsetStr = "";
    if (hasAfter && typeof afterInput === "string") {
        const offset = (0, graphql_relay_1.cursorToOffset)(afterInput) + 1;
        if (offset && offset !== 0) {
            offsetStr = `SKIP $${varName}_offset`;
            cypherParams[`${varName}_offset`] = (0, neo4j_driver_1.int)(offset);
        }
    }
    let limitStr = "";
    if (hasFirst) {
        limitStr = `LIMIT $${varName}_limit`;
        cypherParams[`${varName}_limit`] = firstInput;
    }
    const withStrs = subStr.projAuth ? [`WITH ${varName}`, subStr.projAuth] : [];
    const cypher = [
        subStr.matchAndWhereStr,
        subStr.authStr,
        ...withStrs,
        `WITH COLLECT(this) as edges`,
        `WITH edges, size(edges) as totalCount`,
        `UNWIND edges as ${varName}`,
        `WITH ${varName}, totalCount`,
        subStr.subqueriesBeforeSort,
        subStr.projectionSubqueries,
        `WITH { node: ${varName} ${projection.projection} } as edge, totalCount, ${varName}`,
        ...(sortStr ? [sortStr] : []),
        ...(offsetStr ? [offsetStr] : []),
        ...(limitStr ? [limitStr] : []),
        `WITH COLLECT(edge) as edges, totalCount`,
        ...subStr.interfaceStrs,
        `RETURN { edges: edges, totalCount: totalCount } as ${varName}`,
    ];
    return [cypher.filter(Boolean).join("\n"), cypherParams];
}
//# sourceMappingURL=translate-read.js.map