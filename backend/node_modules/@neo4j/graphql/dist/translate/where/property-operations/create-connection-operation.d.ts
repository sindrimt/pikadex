import type { ConnectionField, ConnectionWhereArg, Context } from "../../../types";
import * as CypherBuilder from "../../cypher-builder/CypherBuilder";
import type { Node, Relationship } from "../../../classes";
export declare function createConnectionOperation({ connectionField, value, context, parentNode, operator, }: {
    connectionField: ConnectionField;
    value: any;
    context: Context;
    parentNode: CypherBuilder.Node;
    operator: string | undefined;
}): CypherBuilder.BooleanOp | CypherBuilder.RawCypher | undefined;
export declare function createConnectionWherePropertyOperation({ context, whereInput, edgeRef, targetNode, node, edge, }: {
    whereInput: ConnectionWhereArg;
    context: Context;
    node: Node;
    edge: Relationship;
    edgeRef: CypherBuilder.Variable;
    targetNode: CypherBuilder.Node;
}): CypherBuilder.Predicate | undefined;
/** Checks if a where property has an explicit interface inside _on */
export declare function hasExplicitNodeInInterfaceWhere({ whereInput, node, }: {
    whereInput: ConnectionWhereArg;
    node: Node;
}): boolean;
//# sourceMappingURL=create-connection-operation.d.ts.map